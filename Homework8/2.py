"""
2*. Определение количества различных подстрок с использованием хэш-функции.
Пусть дана строка S длиной N, состоящая только из маленьких латинских букв.
Требуется найти количество различных подстрок в этой строке.
"""

import hashlib
import timeit


def count_substring_hash(s: str):
    set_hash = set()
    # это дает дополнительный эффект, что если мы получаем две подстроки,
    # они дают нам одинаковые хэш-суммы, а множество удаляет нам дубликаты
    # и это избавляет нас от необходимости проверки повтора подстроки
    for i in range(len(s)):
        for j in range(i + 1, len(s) + 1):
            set_hash.add(hash(s[i:j]))
    return len(set_hash) - 1  # Вычитаем совпадение строки с самой собой


def count_substring_sha1(s: str):
    set_sha1 = set()
    # это дает дополнительный эффект, что если мы получаем две подстроки,
    # они дают нам одинаковые хэш-суммы, а множество удаляет нам дубликаты
    # и это избавляет нас от необходимости проверки повтора подстроки
    for i in range(len(s)):
        for j in range(i + 1, len(s) + 1):
            set_sha1.add(hashlib.sha1(s[i:j].encode('utf-8')).hexdigest())
    return len(set_sha1) - 1  # Вычитаем совпадение строки с самой собой


# my_str = 'My name is Antonina' Для данной строки 181 различных подстрок
my_str = input('Введите, пожалуйста строку для проверки: ')

print("=" * 10, "Результат первой функции", "=" * 10)
count_1 = count_substring_hash(my_str)
print(f'В строке "{my_str}"\nесть {count_1} различных подстрок')
print("=" * 10, "Результат второй функции", "=" * 10)
count_2 = count_substring_sha1(my_str)
print(f'В строке "{my_str}"\nесть {count_2} различных подстрок')

print(timeit.timeit('count_substring_hash(my_str)', number=100, globals=globals()))  # 0.007241642000000326
print(timeit.timeit('count_substring_sha1(my_str)', number=100, globals=globals()))  # 0.027729234000000602

# Вывод: встроенная функция hash работает быстрее в несколько раз, чем функция sha1.
# Но алгоритм хеширования sha1 более устойчив к колизиям, засчет этого он дольше
# Если нам нужны хэши только в рамках работы программы и их не надо нигде сохранять,
# то вполне логично пользоваться именно функцией hash
