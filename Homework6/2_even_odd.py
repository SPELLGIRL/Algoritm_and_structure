'''
1. Подсчитать, сколько было выделено памяти под переменные в ранее
разработанные программы в рамках первых трех уроков. Проанализировать
результат и определить программы с наиболее эффективным использованием памяти.
Примечание: Для анализа возьмите любые 1-3 ваших программ или несколько
вариантов кода для одной и той же задачи. Результаты анализа вставьте в виде
комментариев к коду. Также укажите в комментариях версию Python
и разрядность вашей ОС.
'''

# Посчитать четные и нечетные цифры введенного натурального числа.
# Например, если введено число 34560, то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).
import sys

# вариант 1
print('=' * 10, 'Вариант № 1', '=' * 10)
num = int(input('Введите целое число: '))
print(f'Под число выделено {sys.getsizeof(num)} байт')
even, odd = 0, 0

while num > 0:
    if num % 2 == 0:
        even += 1
    else:
        odd += 1
    num = num // 10

print(f'Под количество четных цифр выделено {sys.getsizeof(even)} байт(а)')
print(f'Под количество нечетных цифр выделено {sys.getsizeof(odd)} байт(а)')
print(f'четных - {even}, нечетных - {odd}')
# Вариант плох тем, что выводит размеры поочередно, без общей суммы.

print('=' * 10, 'Вариант № 2', '=' * 10)

# вариант 2
sum_ = 0
num = int(input('Введите целое число: '))
sum_ += sys.getsizeof(num)
even, odd = 0, 0

while num > 0:
    if num % 2 == 0:
        even += 1
    else:
        odd += 1
    num = num // 10

sum_ += sys.getsizeof(even)
sum_ += sys.getsizeof(odd)
print(f'четных - {even}, нечетных - {odd}')
print(f'Под все переменные было выделено {sum_} байт(а)')
# Данный вариант плох наличием лишнего и при желании внести изменения, придется читать весь код.
# Версия Python 3.7 Windows 10 / 64-разрядная ОС